{"ast":null,"code":"var _jsxFileName = \"/Users/adamwolfman/sei-june-bugs/projects/react_project/inHIIT/front-end/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport WorkoutContainer from './WorkoutContainer/WorkoutContainer';\nimport WeatherAside from './WeatherAside/WeatherAside';\nimport WeatherForecast from './WeatherForecast/WeatherForecast';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.weatherSearch = async (e, zipCode) => {\n      e.preventDefault();\n\n      try {\n        const response = await fetch(\"https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/geocode/json?address=\\\"\".concat(zipCode, \"\\\"&key=AIzaSyDVPLLlJAQ679Frd0gu11khJ9mW02wsvWQ\"));\n\n        if (response.status !== 200) {\n          throw Error(response.statusText);\n        }\n\n        const parsedResponse = await response.json();\n        this.setState({\n          lat: parsedResponse.results[0].geometry.location.lat,\n          long: parsedResponse.results[0].geometry.location.lng,\n          city: parsedResponse.results[0].address_components[1].long_name\n        });\n      } catch (err) {\n        console.log(err);\n      }\n\n      this.getWeather();\n    };\n\n    this.getWeather = async () => {\n      try {\n        const response = await fetch(\"https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/8a94adc7152ba66046780b53e6b95709/\".concat(this.state.lat, \",\").concat(this.state.long));\n\n        if (response.status !== 200) {\n          throw Error(response.statusText);\n        }\n\n        const parsedWeather = await response.json();\n        const forecastArray = [];\n        parsedWeather.daily.data.forEach(day => {\n          //console.log(parsedWeather.currently.icon);\n          forecastArray.push({\n            summary: day.summary,\n            precipProb: day.precipProbability,\n            precipType: day.precipType,\n            tempHigh: day.temperatureHigh,\n            tempLow: day.temperatureLow,\n            unixTime: day.time\n          });\n        });\n        this.setState({\n          weather: {\n            temp: parsedWeather.currently.temperature,\n            currentSummary: parsedWeather.currently.summary,\n            dailyOutlook: parsedWeather.daily.summary,\n            city: this.state.city,\n            icon: parsedWeather.currently.icon\n          },\n          forecast: forecastArray\n        });\n        this.setBackground();\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.setBackground = () => {\n      console.log(this.state.weather.icon, \"in function\");\n    };\n\n    this.state = {\n      weather: {\n        temp: null,\n        currentSummary: '',\n        dailyOutlook: ''\n      },\n      forecast: null,\n      lat: 39.7392,\n      long: -104.9903,\n      city: 'Denver'\n    };\n  }\n\n  componentDidMount() {\n    this.getWeather();\n  }\n\n  // icon\n  // ['clear-day', clear-night', 'rain', 'snow', 'sleet', 'wind', 'fog', 'cloudy', 'partly-cloudy-day', 'partly-cloudy-night']\n  render() {\n    return React.createElement(\"div\", {\n      id: \"app\",\n      className: \"App flex-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"logo\",\n      src: require('./images/inHIIT_logo.png'),\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(WeatherForecast, {\n      weatherData: this.state.weather,\n      weatherSearch: this.weatherSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"main-flex-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"workout-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(WorkoutContainer, {\n      setForcast: this.setForecast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"aside-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.state.forecast ? React.createElement(WeatherAside, {\n      forecast: this.state.forecast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }) : null)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/adamwolfman/sei-june-bugs/projects/react_project/inHIIT/front-end/src/App.js"],"names":["React","Component","WorkoutContainer","WeatherAside","WeatherForecast","App","constructor","weatherSearch","e","zipCode","preventDefault","response","fetch","status","Error","statusText","parsedResponse","json","setState","lat","results","geometry","location","long","lng","city","address_components","long_name","err","console","log","getWeather","state","parsedWeather","forecastArray","daily","data","forEach","day","push","summary","precipProb","precipProbability","precipType","tempHigh","temperatureHigh","tempLow","temperatureLow","unixTime","time","weather","temp","currently","temperature","currentSummary","dailyOutlook","icon","forecast","setBackground","componentDidMount","render","require","setForecast"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport WorkoutContainer from './WorkoutContainer/WorkoutContainer';\nimport WeatherAside from './WeatherAside/WeatherAside';\nimport WeatherForecast from './WeatherForecast/WeatherForecast';\n\n\nclass App extends Component {\n    constructor(){\n      super();\n      this.state = {\n        weather: {\n            temp: null,\n            currentSummary: '',\n            dailyOutlook: '',            \n        },        \n        forecast: null,\n        lat: 39.7392,\n        long: -104.9903,\n        city: 'Denver',        \n      }\n    }\n\n    componentDidMount(){      \n      this.getWeather();\n    }\n\n    weatherSearch = async (e, zipCode) => {\n      e.preventDefault();      \n      try{\n          const response = await fetch(`https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/geocode/json?address=\"${zipCode}\"&key=AIzaSyDVPLLlJAQ679Frd0gu11khJ9mW02wsvWQ`);\n          if(response.status !== 200){\n              throw(Error(response.statusText));\n          }\n          const parsedResponse = await response.json();\n\n          this.setState({\n              lat: parsedResponse.results[0].geometry.location.lat,\n              long: parsedResponse.results[0].geometry.location.lng,\n              city: parsedResponse.results[0].address_components[1].long_name\n          })\n      } catch(err){\n          console.log(err);\n      }      \n      this.getWeather(); \n  }\n\n    getWeather = async () => {\n\n        try {\n            const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/8a94adc7152ba66046780b53e6b95709/${this.state.lat},${this.state.long}`);\n\n            if(response.status !== 200){\n                throw(Error(response.statusText));\n            }\n            const parsedWeather = await response.json();\n            const forecastArray = [];\n            parsedWeather.daily.data.forEach((day) => {\n                //console.log(parsedWeather.currently.icon);\n                forecastArray.push({\n                    summary: day.summary,\n                    precipProb: day.precipProbability,\n                    precipType: day.precipType,\n                    tempHigh: day.temperatureHigh,\n                    tempLow: day.temperatureLow,\n                    unixTime: day.time\n                    \n                })\n            })\n\n            \n\n            this.setState({\n                weather: {\n                    temp: parsedWeather.currently.temperature,\n                    currentSummary: parsedWeather.currently.summary,\n                    dailyOutlook: parsedWeather.daily.summary,\n                    city: this.state.city,\n                    icon: parsedWeather.currently.icon\n                },\n                forecast: forecastArray\n            })\n\n            this.setBackground();\n\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    setBackground = () => {\n\n      console.log(this.state.weather.icon, \"in function\")\n\n    }\n\n    // icon\n    // ['clear-day', clear-night', 'rain', 'snow', 'sleet', 'wind', 'fog', 'cloudy', 'partly-cloudy-day', 'partly-cloudy-night']\n\n    render(){\n        return (\n          <div id=\"app\" className=\"App flex-container\">\n            <img className=\"logo\" src={require('./images/inHIIT_logo.png')} alt=\"logo\"></img>\n            <WeatherForecast weatherData={this.state.weather} weatherSearch={this.weatherSearch}/>\n            <div className=\"main-flex-container\">             \n              <div className=\"workout-container\">\n                <WorkoutContainer setForcast={this.setForecast}/>\n              </div>            \n              <div className=\"aside-container\">\n                {this.state.forecast ? <WeatherAside  forecast={this.state.forecast}/> : null}\n              </div>           \n            </div>\n          </div>\n        )\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}