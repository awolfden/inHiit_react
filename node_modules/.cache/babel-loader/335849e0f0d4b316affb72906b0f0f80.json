{"ast":null,"code":"import _objectSpread from \"/Users/adamwolfman/sei-june-bugs/projects/react_project/inHIIT/front-end/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/adamwolfman/sei-june-bugs/projects/react_project/inHIIT/front-end/src/WorkoutContainer/WorkoutContainer.jsx\";\nimport React, { Component } from 'react';\nimport WorkoutList from './WorkoutList/WorkoutList';\nimport WeatherForecast from './WeatherForecast/WeatherForecast';\n\nclass WorkoutContainer extends Component {\n  constructor() {\n    super();\n\n    this.getWorkouts = async () => {\n      try {\n        const response = await fetch('http://localhost:9000/workouts');\n\n        if (response.status !== 200) {\n          throw Error(response.statusText);\n        }\n\n        const parsedWorkouts = await response.json();\n        this.setState({\n          workouts: parsedWorkouts.data\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.weatherSearch = async (e, zipCode) => {\n      e.preventDefault();\n      console.log(zipCode);\n\n      try {\n        const response = await fetch(\"https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/geocode/json?address=\\\"\".concat(zipCode, \"\\\"&key=AIzaSyDVPLLlJAQ679Frd0gu11khJ9mW02wsvWQ\"));\n\n        if (response.status !== 200) {\n          throw Error(response.statusText);\n        }\n\n        const parsedResponse = await response.json();\n        console.log(parsedResponse, \"<-- parsed response zip data\");\n        this.setState({\n          lat: parsedResponse.results[0].geometry.location.lat,\n          long: parsedResponse.results[0].geometry.location.lng,\n          city: parsedResponse.results[0].address_components[1].long_name\n        });\n      } catch (err) {\n        console.log(err);\n      }\n\n      this.getWeather();\n    };\n\n    this.getWeather = async () => {\n      try {\n        const response = await fetch(\"https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/8a94adc7152ba66046780b53e6b95709/\".concat(this.state.lat, \",\").concat(this.state.long));\n\n        if (response.status !== 200) {\n          throw Error(response.statusText);\n        }\n\n        const parsedWeather = await response.json(); //console.log(parsedWeather, \"<-- parsedWeather\");\n\n        const forecastArray = [];\n        const forecastData = parsedWeather.daily.data.forEach(day => {\n          //console.log(day);\n          forecastArray.push({\n            summary: day.summary,\n            precipProb: day.precipProbability,\n            precipType: day.precipType,\n            tempHigh: day.temperatureHigh,\n            tempLow: day.temperatureLow\n          });\n        });\n        console.log(forecastArray, \"<-- forecast Array\");\n        this.setState({\n          weather: {\n            temp: parsedWeather.currently.temperature,\n            currentSummary: parsedWeather.currently.summary,\n            dailyOutlook: parsedWeather.daily.summary,\n            city: this.state.city\n          },\n          forecast: forecastArray\n        });\n        this.props.setForcast(forecastArray);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.createWorkout = async (formData, e) => {\n      e.preventDefault();\n\n      try {\n        const createdWorkout = await fetch('http://localhost:9000/workouts', {\n          method: 'POST',\n          body: JSON.stringify(formData),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const parsedResponse = await createdWorkout.json();\n        this.setState({\n          workouts: [...this.state.workouts, parsedResponse.data]\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.deleteWorkout = async deletedWorkoutID => {\n      console.log(deletedWorkoutID, 'hit delete function');\n\n      try {\n        const deleteWorkout = await fetch(\"http://localhost:9000/workouts/\".concat(deletedWorkoutID), {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const parsedResponse = await deleteWorkout.json();\n        console.log(parsedResponse, 'parsed response');\n        console.log(deletedWorkoutID, \"deletedWorkoutID from before\");\n\n        if (parsedResponse.status === 200) {\n          this.setState({\n            workouts: this.state.workouts.filter(workout => workout._id !== deletedWorkoutID)\n          });\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.handleFormChange = e => {\n      this.setState({\n        workoutToEdit: _objectSpread({}, this.state.workoutToEdit, {\n          [e.target.name]: e.target.value\n        })\n      });\n    };\n\n    this.modalShows = thisOne => {\n      this.setState({\n        workoutToEdit: thisOne\n      });\n    };\n\n    this.editWorkout = async e => {\n      e.preventDefault();\n      console.log(this.state.workoutToEdit._id);\n\n      try {\n        const updateWorkout = await fetch('http://localhost:9000/workouts/' + this.state.workoutToEdit._id, {\n          method: 'PUT',\n          body: JSON.stringify(this.state.workoutToEdit),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const parsedResponse = await updateWorkout.json();\n        const editedWorkoutArr = this.state.workouts.map(workout => {\n          if (workout._id === this.state.workoutToEdit._id) {\n            workout = parsedResponse.data;\n          }\n\n          return workout;\n        });\n        this.setState({\n          workouts: editedWorkoutArr\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.state = {\n      workouts: [],\n      workoutToEdit: {\n        _id: null,\n        name: '',\n        intervalOne: 0,\n        intervalTwo: 0,\n        cycles: 0\n      },\n      modalShowing: false,\n      weather: {\n        temp: null,\n        currentSummary: '',\n        dailyOutlook: ''\n      },\n      forecast: null,\n      lat: 39.7392,\n      long: -104.9903,\n      city: 'Denver'\n    };\n  }\n\n  componentDidMount() {\n    this.getWorkouts();\n    this.getWeather();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"flex-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(WeatherForecast, {\n      weatherData: this.state.weather,\n      weatherSearch: this.weatherSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), React.createElement(WorkoutList, {\n      modalShows: this.modalShows,\n      editWorkout: this.editWorkout,\n      workouts: this.state.workouts,\n      createWorkout: this.createWorkout,\n      deleteWorkout: this.deleteWorkout,\n      handleFormChange: this.handleFormChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default WorkoutContainer;","map":{"version":3,"sources":["/Users/adamwolfman/sei-june-bugs/projects/react_project/inHIIT/front-end/src/WorkoutContainer/WorkoutContainer.jsx"],"names":["React","Component","WorkoutList","WeatherForecast","WorkoutContainer","constructor","getWorkouts","response","fetch","status","Error","statusText","parsedWorkouts","json","setState","workouts","data","err","console","log","weatherSearch","e","zipCode","preventDefault","parsedResponse","lat","results","geometry","location","long","lng","city","address_components","long_name","getWeather","state","parsedWeather","forecastArray","forecastData","daily","forEach","day","push","summary","precipProb","precipProbability","precipType","tempHigh","temperatureHigh","tempLow","temperatureLow","weather","temp","currently","temperature","currentSummary","dailyOutlook","forecast","props","setForcast","createWorkout","formData","createdWorkout","method","body","JSON","stringify","headers","deleteWorkout","deletedWorkoutID","filter","workout","_id","handleFormChange","workoutToEdit","target","name","value","modalShows","thisOne","editWorkout","updateWorkout","editedWorkoutArr","map","intervalOne","intervalTwo","cycles","modalShowing","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport WorkoutList from './WorkoutList/WorkoutList';\nimport WeatherForecast from './WeatherForecast/WeatherForecast';\n\nclass WorkoutContainer extends Component {\n    constructor(){\n        super();\n        this.state = {\n            workouts: [],\n            workoutToEdit: {\n                _id: null,\n                name: '',\n                intervalOne: 0,\n                intervalTwo: 0,\n                cycles: 0\n            },\n            modalShowing: false, \n            weather: {\n                temp: null,\n                currentSummary: '',\n                dailyOutlook: '',\n                \n            },\n            \n            forecast: null,\n\n            lat: 39.7392,\n            long: -104.9903,\n            city: 'Denver',\n            \n        }\n    }\n\n    componentDidMount(){\n        this.getWorkouts();\n        this.getWeather();\n    }\n\n    getWorkouts = async () => {\n\n        try {\n            const response = await fetch('http://localhost:9000/workouts');\n\n            if(response.status !== 200){\n                throw(Error(response.statusText));\n            }\n\n            const parsedWorkouts = await response.json();\n            this.setState({\n                workouts: parsedWorkouts.data\n            })\n\n        } catch(err) {\n            console.log(err);\n        }\n\n    }\n\n\n    weatherSearch = async (e, zipCode) => {\n        e.preventDefault();\n        console.log(zipCode);\n        \n        try{\n            const response = await fetch(`https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/geocode/json?address=\"${zipCode}\"&key=AIzaSyDVPLLlJAQ679Frd0gu11khJ9mW02wsvWQ`);\n            if(response.status !== 200){\n                throw(Error(response.statusText));\n            }\n\n            const parsedResponse = await response.json();\n            console.log(parsedResponse, \"<-- parsed response zip data\")\n\n            this.setState({\n                lat: parsedResponse.results[0].geometry.location.lat,\n                long: parsedResponse.results[0].geometry.location.lng,\n                city: parsedResponse.results[0].address_components[1].long_name\n            })\n\n        } catch(err){\n            console.log(err);\n        }\n\n        \n        this.getWeather(); \n    }\n\n    getWeather = async () => {\n\n        try {\n            const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/8a94adc7152ba66046780b53e6b95709/${this.state.lat},${this.state.long}`);\n\n            if(response.status !== 200){\n                throw(Error(response.statusText));\n            }\n\n            const parsedWeather = await response.json();\n            //console.log(parsedWeather, \"<-- parsedWeather\");\n\n            const forecastArray = [];\n\n            const forecastData = parsedWeather.daily.data.forEach((day) => {\n                //console.log(day);\n                forecastArray.push({\n                    summary: day.summary,\n                    precipProb: day.precipProbability,\n                    precipType: day.precipType,\n                    tempHigh: day.temperatureHigh,\n                    tempLow: day.temperatureLow\n                })\n            })\n            console.log(forecastArray, \"<-- forecast Array\"); \n\n            this.setState({\n                weather: {\n                    temp: parsedWeather.currently.temperature,\n                    currentSummary: parsedWeather.currently.summary,\n                    dailyOutlook: parsedWeather.daily.summary,\n                    city: this.state.city\n                },\n                forecast: forecastArray\n            })\n            this.props.setForcast(forecastArray);\n        } catch(err) {\n            console.log(err);\n        }\n\n    }\n\n    createWorkout = async (formData, e) => {\n        e.preventDefault();\n        try {\n            const createdWorkout = await fetch('http://localhost:9000/workouts', {\n                method: 'POST',\n                body: JSON.stringify(formData),\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            const parsedResponse = await createdWorkout.json();\n            this.setState({workouts: [...this.state.workouts, parsedResponse.data]})\n\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    deleteWorkout = async (deletedWorkoutID) => {\n        console.log(deletedWorkoutID, 'hit delete function');\n        try{\n            const deleteWorkout = await fetch(`http://localhost:9000/workouts/${deletedWorkoutID}`, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            const parsedResponse = await deleteWorkout.json();\n            console.log(parsedResponse, 'parsed response');\n            console.log(deletedWorkoutID, \"deletedWorkoutID from before\")\n            if(parsedResponse.status === 200){\n                this.setState({\n                    workouts: this.state.workouts.filter(workout => workout._id !== deletedWorkoutID)\n                })\n            }\n\n\n        } catch(err) {\n            console.log(err);\n        }\n\n    };\n\n    handleFormChange = (e) => {\n        this.setState({\n            workoutToEdit: {\n                ...this.state.workoutToEdit, \n                [e.target.name]: e.target.value\n            }\n        })\n    }\n\n    modalShows = (thisOne) => {\n        this.setState({\n            workoutToEdit: thisOne\n        })\n    }\n\n    editWorkout = async (e) => {\n        e.preventDefault();\n        console.log(this.state.workoutToEdit._id)\n        try {\n            const updateWorkout = await fetch('http://localhost:9000/workouts/' + this.state.workoutToEdit._id, {\n                method: 'PUT',\n                body: JSON.stringify(this.state.workoutToEdit),\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n\n            const parsedResponse = await updateWorkout.json();\n            const editedWorkoutArr = this.state.workouts.map((workout) => {\n                if(workout._id === this.state.workoutToEdit._id){\n                    workout = parsedResponse.data\n                }\n                return workout\n            });\n\n            this.setState({\n                workouts: editedWorkoutArr,\n            });\n\n        } catch(err) {\n            console.log(err)\n        }        \n    }\n\n    render(){\n\n        return(\n            <div className=\"flex-container\">\n                <WeatherForecast weatherData={this.state.weather} weatherSearch={this.weatherSearch}/>\n                <WorkoutList modalShows={this.modalShows} editWorkout={this.editWorkout} workouts={this.state.workouts} createWorkout={this.createWorkout} deleteWorkout={this.deleteWorkout} handleFormChange={this.handleFormChange}/> \n            </div>\n            \n        )\n        \n    }\n}\n\n\nexport default WorkoutContainer;"]},"metadata":{},"sourceType":"module"}