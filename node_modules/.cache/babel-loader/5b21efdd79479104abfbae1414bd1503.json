{"ast":null,"code":"var _jsxFileName = \"/Users/adamwolfman/sei-june-bugs/projects/react_project/inHIIT/front-end/src/WeatherAside/Forecast/Forecast.jsx\";\nimport React from 'react';\n\nconst Forecast = props => {\n  const makePercent = probability => {\n    return probability * 100;\n  };\n\n  const makeDate = unixTime => {\n    var a = new Date(unixTime * 1000);\n    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    var year = a.getFullYear();\n    var month = months[a.getMonth()];\n    var date = a.getDate();\n    var dateString = \"\".concat(month, \" \").concat(date, \", \").concat(year);\n    return dateString;\n  };\n\n  const dailyForecast = props.forecast.map((day, i) => {\n    //console.log(day)\n    return React.createElement(\"div\", {\n      key: i + 'forecast',\n      className: \"forecast\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, makeDate(day.unixTime)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, day.summary), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"High \", day.tempHigh, \"\\xB0 / Low \", day.tempLow, \"\\xB0\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, makePercent(day.precipProb), \"% chance of \", day.precipType));\n  });\n  return dailyForecast;\n};\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/adamwolfman/sei-june-bugs/projects/react_project/inHIIT/front-end/src/WeatherAside/Forecast/Forecast.jsx"],"names":["React","Forecast","props","makePercent","probability","makeDate","unixTime","a","Date","months","year","getFullYear","month","getMonth","date","getDate","dateString","dailyForecast","forecast","map","day","i","summary","tempHigh","tempLow","precipProb","precipType"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAExB,QAAMC,WAAW,GAAIC,WAAD,IAAiB;AACjC,WAAOA,WAAW,GAAG,GAArB;AACH,GAFD;;AAIA,QAAMC,QAAQ,GAAIC,QAAD,IAAc;AACvB,QAAIC,CAAC,GAAG,IAAIC,IAAJ,CAASF,QAAQ,GAAG,IAApB,CAAR;AACA,QAAIG,MAAM,GAAG,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAmB,KAAnB,EAAyB,KAAzB,EAA+B,KAA/B,EAAqC,KAArC,EAA2C,KAA3C,EAAiD,KAAjD,EAAuD,KAAvD,EAA6D,KAA7D,EAAmE,KAAnE,CAAb;AACA,QAAIC,IAAI,GAAGH,CAAC,CAACI,WAAF,EAAX;AACA,QAAIC,KAAK,GAAGH,MAAM,CAACF,CAAC,CAACM,QAAF,EAAD,CAAlB;AACA,QAAIC,IAAI,GAAGP,CAAC,CAACQ,OAAF,EAAX;AACA,QAAIC,UAAU,aAAMJ,KAAN,cAAeE,IAAf,eAAwBJ,IAAxB,CAAd;AAEA,WAAOM,UAAP;AACP,GATD;;AAaA,QAAMC,aAAa,GAAGf,KAAK,CAACgB,QAAN,CAAeC,GAAf,CAAmB,CAACC,GAAD,EAAMC,CAAN,KAAY;AACjD;AACA,WACI;AAAK,MAAA,GAAG,EAAEA,CAAC,GAAG,UAAd;AAA0B,MAAA,SAAS,EAAC,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKhB,QAAQ,CAACe,GAAG,CAACd,QAAL,CAAb,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIc,GAAG,CAACE,OAAR,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAASF,GAAG,CAACG,QAAb,iBAA+BH,GAAG,CAACI,OAAnC,SAHJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIrB,WAAW,CAACiB,GAAG,CAACK,UAAL,CAAf,kBAA6CL,GAAG,CAACM,UAAjD,CALJ,CADJ;AASH,GAXqB,CAAtB;AAaA,SAAOT,aAAP;AACH,CAjCD;;AAmCA,eAAehB,QAAf","sourcesContent":["import React from 'react';\n\nconst Forecast = (props) => {\n    \n    const makePercent = (probability) => {\n        return probability * 100;\n    }\n\n    const makeDate = (unixTime) => {       \n            var a = new Date(unixTime * 1000);\n            var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n            var year = a.getFullYear();\n            var month = months[a.getMonth()];\n            var date = a.getDate();\n            var dateString = `${month} ${date}, ${year}`\n            \n            return dateString;          \n    }\n    \n    \n\n    const dailyForecast = props.forecast.map((day, i) => {\n        //console.log(day)\n        return(\n            <div key={i + 'forecast'} className='forecast'>\n                <h4>{makeDate(day.unixTime)}</h4>\n                <p>{day.summary}</p>\n                <p>High {day.tempHigh}° / Low {day.tempLow}°</p>\n                \n                <p>{makePercent(day.precipProb)}% chance of {day.precipType}</p>\n            </div>\n        )\n    });\n\n    return dailyForecast;\n}\n\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}