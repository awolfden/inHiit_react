{"ast":null,"code":"import _objectSpread from \"/Users/adamwolfman/sei-june-bugs/projects/react_project/inHIIT/front-end/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/adamwolfman/sei-june-bugs/projects/react_project/inHIIT/front-end/src/WorkoutContainer/WorkoutContainer.jsx\";\nimport React, { Component } from 'react';\nimport WorkoutList from './WorkoutList/WorkoutList';\nimport WeatherForecast from './WeatherForecast/WeatherForecast';\n\nclass WorkoutContainer extends Component {\n  constructor() {\n    super();\n\n    this.getWorkouts = async () => {\n      try {\n        const response = await fetch('http://localhost:9000/workouts');\n\n        if (response.status !== 200) {\n          throw Error(response.statusText);\n        }\n\n        const parsedWorkouts = await response.json();\n        this.setState({\n          workouts: parsedWorkouts.data\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.weatherSearch = (lat, long) => {\n      this.setState({\n        lat: 5,\n        long: 5\n      });\n      this.getWeather();\n    };\n\n    this.getWeather = async () => {\n      try {\n        const response = await fetch(\"https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/8a94adc7152ba66046780b53e6b95709/\".concat(this.state.lat, \",\").concat(this.state.long));\n\n        if (response.status !== 200) {\n          throw Error(response.statusText);\n        }\n\n        const parsedWeather = await response.json();\n        console.log(parsedWeather, \"<-- parsedWeather\");\n        this.setState({\n          weather: {\n            temp: parsedWeather.currently.temperature,\n            currentSummary: parsedWeather.currently.summary,\n            dailyOutlook: parsedWeather.daily.summary\n          }\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.createWorkout = async (formData, e) => {\n      e.preventDefault();\n\n      try {\n        const createdWorkout = await fetch('http://localhost:9000/workouts', {\n          method: 'POST',\n          body: JSON.stringify(formData),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const parsedResponse = await createdWorkout.json();\n        this.setState({\n          workouts: [...this.state.workouts, parsedResponse.data]\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.deleteWorkout = async deletedWorkoutID => {\n      console.log(deletedWorkoutID, 'hit delete function');\n\n      try {\n        const deleteWorkout = await fetch(\"http://localhost:9000/workouts/\".concat(deletedWorkoutID), {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const parsedResponse = await deleteWorkout.json();\n        console.log(parsedResponse, 'parsed response');\n        console.log(deletedWorkoutID, \"deletedWorkoutID from before\");\n\n        if (parsedResponse.status === 200) {\n          this.setState({\n            workouts: this.state.workouts.filter(workout => workout._id !== deletedWorkoutID)\n          });\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.handleFormChange = e => {\n      this.setState({\n        workoutToEdit: _objectSpread({}, this.state.workoutToEdit, {\n          [e.target.name]: e.target.value\n        })\n      });\n    };\n\n    this.modalShows = thisOne => {\n      this.setState({\n        workoutToEdit: thisOne\n      });\n    };\n\n    this.editWorkout = async e => {\n      e.preventDefault();\n      console.log(this.state.workoutToEdit._id);\n\n      try {\n        const updateWorkout = await fetch('http://localhost:9000/workouts/' + this.state.workoutToEdit._id, {\n          method: 'PUT',\n          body: JSON.stringify(this.state.workoutToEdit),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const parsedResponse = await updateWorkout.json();\n        const editedWorkoutArr = this.state.workouts.map(workout => {\n          if (workout._id === this.state.workoutToEdit._id) {\n            workout = parsedResponse.data;\n          }\n\n          return workout;\n        });\n        this.setState({\n          workouts: editedWorkoutArr\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.state = {\n      workouts: [],\n      workoutToEdit: {\n        _id: null,\n        name: '',\n        intervalOne: 0,\n        intervalTwo: 0,\n        cycles: 0\n      },\n      modalShowing: false,\n      weather: {\n        temp: null,\n        // currently.temperature\n        currentSummary: '',\n        // currently.summary\n        dailyOutlook: '' // daily.summary\n\n      },\n      lat: null,\n      long: null\n    };\n  }\n\n  componentDidMount() {\n    this.getWorkouts();\n    this.getWeather();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"workout-container flex-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(WeatherForecast, {\n      weatherData: this.state.weather,\n      weatherSearch: this.weatherSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(WorkoutList, {\n      modalShows: this.modalShows,\n      editWorkout: this.editWorkout,\n      workouts: this.state.workouts,\n      createWorkout: this.createWorkout,\n      deleteWorkout: this.deleteWorkout,\n      handleFormChange: this.handleFormChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default WorkoutContainer;","map":{"version":3,"sources":["/Users/adamwolfman/sei-june-bugs/projects/react_project/inHIIT/front-end/src/WorkoutContainer/WorkoutContainer.jsx"],"names":["React","Component","WorkoutList","WeatherForecast","WorkoutContainer","constructor","getWorkouts","response","fetch","status","Error","statusText","parsedWorkouts","json","setState","workouts","data","err","console","log","weatherSearch","lat","long","getWeather","state","parsedWeather","weather","temp","currently","temperature","currentSummary","summary","dailyOutlook","daily","createWorkout","formData","e","preventDefault","createdWorkout","method","body","JSON","stringify","headers","parsedResponse","deleteWorkout","deletedWorkoutID","filter","workout","_id","handleFormChange","workoutToEdit","target","name","value","modalShows","thisOne","editWorkout","updateWorkout","editedWorkoutArr","map","intervalOne","intervalTwo","cycles","modalShowing","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport WorkoutList from './WorkoutList/WorkoutList';\nimport WeatherForecast from './WeatherForecast/WeatherForecast';\n\nclass WorkoutContainer extends Component {\n    constructor(){\n        super();\n        this.state = {\n            workouts: [],\n            workoutToEdit: {\n                _id: null,\n                name: '',\n                intervalOne: 0,\n                intervalTwo: 0,\n                cycles: 0\n            },\n            modalShowing: false, \n            weather: {\n                temp: null, // currently.temperature\n                currentSummary: '', // currently.summary\n                dailyOutlook: '' // daily.summary\n\n            },\n            lat: null,\n            long: null\n        }\n    }\n\n    componentDidMount(){\n        this.getWorkouts();\n        this.getWeather();\n    }\n\n    getWorkouts = async () => {\n\n        try {\n            const response = await fetch('http://localhost:9000/workouts');\n\n            if(response.status !== 200){\n                throw(Error(response.statusText));\n            }\n\n            const parsedWorkouts = await response.json();\n            this.setState({\n                workouts: parsedWorkouts.data\n            })\n\n        } catch(err) {\n            console.log(err);\n        }\n\n    }\n\n\n    weatherSearch = (lat, long) => {\n\n\n        this.setState({\n            lat: 5,\n            long: 5\n        })\n        this.getWeather(); \n    }\n\n    getWeather = async () => {\n\n        try {\n            const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/8a94adc7152ba66046780b53e6b95709/${this.state.lat},${this.state.long}`);\n\n            if(response.status !== 200){\n                throw(Error(response.statusText));\n            }\n\n            const parsedWeather = await response.json();\n            console.log(parsedWeather, \"<-- parsedWeather\");\n            this.setState({\n                weather: {\n                    temp: parsedWeather.currently.temperature,\n                    currentSummary: parsedWeather.currently.summary,\n                    dailyOutlook: parsedWeather.daily.summary\n                }\n            })\n\n        } catch(err) {\n            console.log(err);\n        }\n\n    }\n\n    createWorkout = async (formData, e) => {\n        e.preventDefault();\n        try {\n            const createdWorkout = await fetch('http://localhost:9000/workouts', {\n                method: 'POST',\n                body: JSON.stringify(formData),\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            const parsedResponse = await createdWorkout.json();\n            this.setState({workouts: [...this.state.workouts, parsedResponse.data]})\n\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    deleteWorkout = async (deletedWorkoutID) => {\n        console.log(deletedWorkoutID, 'hit delete function');\n        try{\n            const deleteWorkout = await fetch(`http://localhost:9000/workouts/${deletedWorkoutID}`, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            const parsedResponse = await deleteWorkout.json();\n            console.log(parsedResponse, 'parsed response');\n            console.log(deletedWorkoutID, \"deletedWorkoutID from before\")\n            if(parsedResponse.status === 200){\n                this.setState({\n                    workouts: this.state.workouts.filter(workout => workout._id !== deletedWorkoutID)\n                })\n            }\n\n\n        } catch(err) {\n            console.log(err);\n        }\n\n    };\n\n    handleFormChange = (e) => {\n        this.setState({\n            workoutToEdit: {\n                ...this.state.workoutToEdit, \n                [e.target.name]: e.target.value\n            }\n        })\n    }\n\n    modalShows = (thisOne) => {\n        this.setState({\n            workoutToEdit: thisOne\n        })\n    }\n\n    editWorkout = async (e) => {\n        e.preventDefault();\n        console.log(this.state.workoutToEdit._id)\n        try {\n            const updateWorkout = await fetch('http://localhost:9000/workouts/' + this.state.workoutToEdit._id, {\n                method: 'PUT',\n                body: JSON.stringify(this.state.workoutToEdit),\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n\n            const parsedResponse = await updateWorkout.json();\n            const editedWorkoutArr = this.state.workouts.map((workout) => {\n                if(workout._id === this.state.workoutToEdit._id){\n                    workout = parsedResponse.data\n                }\n                return workout\n            });\n\n            this.setState({\n                workouts: editedWorkoutArr,\n            });\n\n        } catch(err) {\n            console.log(err)\n        }        \n    }\n\n    render(){\n\n        return(\n            <div className=\"workout-container flex-container\">\n                <WeatherForecast weatherData={this.state.weather} weatherSearch={this.weatherSearch}/>\n                <WorkoutList modalShows={this.modalShows} editWorkout={this.editWorkout} workouts={this.state.workouts} createWorkout={this.createWorkout} deleteWorkout={this.deleteWorkout} handleFormChange={this.handleFormChange}/> \n            </div>\n            \n        )\n        \n    }\n}\n\n\nexport default WorkoutContainer;"]},"metadata":{},"sourceType":"module"}